1. 평소 웹 클라이언트 프로그래밍을 할 때 주로 사용하는 메인 프레임웍과 해당 프레임웍을 사용하는 이유가 무엇인가요?
중고차 유통 플랫폼 프로젝트에서 관리자 페이지를 Vue.js를 활용하여 개발한 경험이 있습니다.
Vue.js를 사용하게 된 이유는, 첫 번째로 낮은 학습 곡선이었습니다. 상세하고 친절한 공식 문서를 제공하며, 다른 프레임워크보다 이해하기 쉬운 템플릿 문법을 사용하기 때문에 JavaScript와 jQuery만 활용한 개발에 익숙한 개발자와 프론트 프레임워크 사용에 익숙하지 않은 개발자에게도 이해하기 쉽고 가독성이 좋은 코드를 개발할 수 있었습니다.
두 번째 이유로 Vue.js 점진적인 적용 가능성이었습니다. Vue.js는 라이브러리만으로 화면 개발만 할 수도 있지만 컴포넌트 재사용 및 믹스인 기법을 이용하여 큰 규모의 애플리케이션 개발까지 할 수 있는 프레임워크입니다.
위와 같은 이유로 Reactjs보다 Vue.js 프레임워크로 선정하여 개발하였고, 성공적으로 개발 마무리를 할 수 있었습니다.

2. React에 대해서는 어떻게 생각하나요?
Vue.js는 HTML과 CSS, JavaScript 활용하여 화면 개발이 가능하여 프레임워크 사용 경험이 적은 개발자들에게 좀 더 익숙하다는 장점이 있습니다.
반면에 Reactjs는 JSX를 이용한 UI 화면 개발을 해야 하지만, 이는 JavaScript의 활용성을 극대화하고 템플릿의 컴포넌트화의 확장성이 더 갖고 있다는 장점이 있고, 애플리케이션을 프론트 프레임워크로 계속 구성해나가는 복잡한 대규모의 애플리케이션은 Reactjs의 장점을 극대화할 수 있다고 생각합니다.
또한 대규모 애플리케이션 같은 경우 템플릿의 에러를 발견하고 조치하기 까다로운 테스트와 디버깅의 어려움이 있을 수 있는데, Reactjs는 JavaScript로만 구성된 템플릿이기 때문에 테스팅 도구와 결합하여 테스트를 지원하고 디버깅을 더욱 수월하게 진행할 수 있는 장점이 있습니다.
과연 어떤 프레임워크가 더 훌륭한 기술인지는 장담할 순 없지만, Reactjs를 활용한 애플리케이션 개발은 개발자로서 도전해보고 싶은 기술 영역입니다.

3. 클라이언트 개발자의 서버 개발에 대해 어떻게 생각하나요?
서비스 개발은 프론트엔드와 백엔드 모두 필요합니다. 고객이 실질적으로 보고 느끼는 프론트엔드와 눈에 보이진 않는 통신으로 데이터 관리하는 백엔드는 떼어놓을 수 없는 관계입니다.
프론트와 백엔드 개발자가 다른 경우, 프론트 업무에서 필요한 API를 상세한 정의서가 없다면 백엔드 개발자의 대응이 느리고 부정확한 데이터를 응답으로 보내게 되는 위험이 있습니다. 두 영역의 개발을 함께한다면 이런 위험 요소가 줄어들게 되고, 개발 퍼포먼스도 높아질 수 있는 영향이 있을 거라 생각합니다.
개발자가 각 영역 한 가지에만 몰두하기보단 '지피지기 백전백승' 이란 말이 있듯이 프론트엔드, 백엔드 두 개의 영역을 모두 이해하고 함께 개발해나갈 수 있는 것이 더욱더 서비스의 품질을 향상하게 시킬 수 있고, 개발자 본인의 역량도 성장할 수 있는 방향이라고 생각합니다.

4. 어떤 개발팀에 속해 일하기를 원하나요? 팀장 문화 VS 팀 문화
수직적인 관계의 팀장 문화는 더욱 체계적인 업무 프로세스와 신속한 의사결정이 장점이지만 팀장에 대한 깊은 의존성으로 자립성이 떨어지고, 팀원들의 전문성이 낮아질 수 있습니다.
반면에, 수평적인 팀 문화라면 자유로운 의사소통을 통해 창의적인 아이디어들이 많이 생산되고, 본인이 제시한 의견과 서비스에 대한 책임감을 느끼게 됨으로써 자신의 전문성을 높일 수 있는 큰 장점이 있습니다. 하지만 의사결정권자의 부재로 의사결정에 대해 다소 지연될 수 있고, 팀원 간의 깊은 유대감은 자기 집단만의 사고방식을 갖게 되는 함정에 빠지게 될 것입니다.
하지만 건강한 조직 문화는 조직이 정의한 뚜렷한 가치관과 목표가 있고, 팀은 그 목표를 위해 함께 노력하며 서로의 발전을 위해 응원할 수 있는 문화라고 생각합니다. 그리고 철저한 성과제도와 함께 건강한 조직 문화를 구축한다면 팀 문화가 가져올 수 있는 단점들을 보완할 수 있다고 생각합니다.
의사결정에 어려움이 있더라도 팀원들과 함께 그 결정을 위해 고민을 하고, 대화를 나눌 수 있는 팀 문화라면 팀 전체가 큰 성장을 이룰 수 있을 것 같습니다.

5. 이상적으로 생각하는 팀 프로젝트 방법에 대해 설명해주세요.
4년 동안 주로 SI 프로젝트를 진행하면서 기획과 개발의 철저하게 분리되는 개발 프로세스를 경험하였습니다. 그런 프로세스는 기술에 대한 이해도가 낮은 기획자들이 작성한 기획서를 보고 개발할 때 기술검토를 다시 하고 기획서를 수정해야 하는 경우가 많았습니다. 그런 과정에서 일정이 지연되는 상황도 많고, 서비스의 품질이 낮아지는 것을 보았습니다.
위와 같은 기획과 개발의 분명하게 나뉘는 업무 분담보다는 서비스의 기술 인프라를 충분히 이해하고 있는 개발자도 서비스 사업과 기획에 참여함으로써, 서비스가 보다 기술 중심적이고 안정적이며 서비스의 품질을 높일 수 있는 것으로 생각합니다.
개발자도 개발적인 지식뿐 아니라 "우리 서비스를 통해서 사람들이 어떤 불편함을 해소할 수 있을까?"라는 기획적인 고민을 꾸준히 하고, 팀원들과 공유하고, 다양한 도전을 해보면서 실패와 성공을 체험해보는 것이 이상적인 팀 프로젝트의 프로세스라고 생각합니다.
