1. 평소 웹 클라이언트 프로그래밍을 할 때 주로 사용하는 메인 프레임웍과 해당 프레임웍을 사용하는 이유가 무엇인가요?
Vue.js/Reactjs/Angular 등 여러 웹 프레임웍이 있습니다.
각 프레임웍 모두 장단점이 있는데, 메인 프레임웍을 채택한 이유에 대해서 설명해주세요.
- 사용 메인 프레임웍 : Vue.js
- 사용한 이유 :
  - 낮은 학습 비용
  - Vue.js 라이브러리를 시작으로 점진적으로 적용할 수 있는 장점

중고차 유통 플랫폼 프로젝트에서 관리자 페이지를 Vue.js를 활용하여 개발한 경험이 있습니다.
Vue.js를 사용하게 된 이유는, 첫 번째로 낮은 학습 곡선이었습니다. 상세하고 친절한 공식 문서를 제공하며, 다른 프레임워크보다 이해하기 쉬운 템플릿 문법을 사용하기 때문에 JavaScript와 jQuery만 활용한 개발에 익숙한 개발자와 프론트 프레임워크 사용에 익숙하지 않은 개발자에게도 이해하기 쉽고 가독성이 좋은 코드를 개발할 수 있었습니다.
두 번째 이유로 Vue.js 점진적인 적용 가능성이었습니다. Vue.js는 라이브러리만으로 화면 개발만 할 수도 있지만 컴포넌트 재사용 및 믹스인 기법을 이용하여 큰 규모의 애플리케이션 개발까지 할 수 있는 프레임워크입니다.
위와 같은 이유로 Reactjs보다 Vue.js 프레임워크로 선정하여 개발하였고, 성공적으로 개발 마무리를 할 수 있었습니다.


2. React에 대해서는 어떻게 생각하나요?
세탁특공대는 앱 개발시 RN을 사용하면서, 웹 역시 React를 사용합니다.
메인 프레임웍이 React가 아닌 경우, 사용하시는 메인 프레임웍이 React와 비교하여 어떤 장점을 가지고 있는지 설명해주세요.
- Reactjs 의 특징
- Vue.js VS Reactjs
  - Vue.js 의 익숙한 Template 개발(HTML + CSS)

Vue.js는 HTML과 CSS, JavaScript 활용하여 화면 개발이 가능하여 프레임워크 사용 경험이 적은 개발자들에게 좀 더 익숙하다는 장점이 있습니다.
반면에 Reactjs는 JSX를 이용한 UI 화면 개발을 해야 하지만, 이는 JavaScript의 활용성을 극대화하고 템플릿의 컴포넌트화의 확장성이 더 갖고 있다는 장점이 있습니다.
그리고 Vue.js는 Reactjs보다 조금 더 가볍게 개발을 할 수 있는 프레임워크입니다. 간단한 화면 개발을 위해 Vue.js는 별도의 변환작업 없이 바로 브라우저에서 확인할 수 있습니다. Reactjs도 기술적으로는 가능하지만, JSX와 ES6에 의존을 많이 하고 있어서 다소 무거운 편입니다.
하지만 애플리케이션을 프론트 프레임워크로 계속 구성해나가는 복잡한 대규모의 애플리케이션은 Reactjs 장점이 분명히 있습니다. 대규모 애플리케이션 같은 경우 템플릿의 에러를 발견하고 조치하기 까다로운 테스트와 디버깅의 어려움이 있습니다. 하지만 Reactjs는 JavaScript로만 구성된 템플릿이기 때문에 테스팅 도구와 결합하여 테스트를 지원하고 디버깅을 더욱 수월하게 진행할 수 있습니다.
과연 어떤 프레임워크가 더 훌륭한 기술인지는 장담할 순 없지만, Reactjs를 활용한 애플리케이션 개발은 개발자로서 도전해보고 싶은 영역입니다.

3. 클라이언트 개발자의 서버 개발에 대해 어떻게 생각하나요?
국내 개발자들은 보통 프론트, 백앤드 등 본인의 포지션을 결정하고, 그에 맞춰 개발합니다.
이런 경계를 무너트려 서버와 프론트가 분리되지 않고 전체 프로젝트를 1명이 해결하는 것에 대해 어떻게 생각하시는지 설명해주세요.
- Front-End + Back-End = Full-Stack 개발자
- 서버 개발에 대한 필요성

서비스 개발은 프론트엔드와 백엔드 모두 필요합니다. 고객이 실질적으로 보고 느끼는 프론트엔드와 눈에 보이진 않는 통신을 이용한 데이터의 흐름을 관리하는 백엔드는 떼어놓을 수 없는 관계입니다. 개발자가 각 영역 한 가지에만 몰두하기보단 '지피지기 백전백승' 이란 말이 있듯이 두 개의 영역을 모두 이해하고 함께 개발해나갈 수 있는 것이 더욱 더 서비스의 품질을 향상하게 시킬 수 있는 방향이라고 생각합니다.


4. 어떤 개발팀에 속해 일하기를 원하나요? 팀장 문화 VS 팀 문화
- 팀장 문화 : 배울점이 많고 실력이 뛰어난 팀장이 있는 개발팀으로 매니지먼트를 받을 수 있으나 팀장님의 오더 하에서만 서비스를 만들 수 있고, 팀장님의 스타일을 그대로 따라가야만 하는 개발팀
- 팀 문화 : 팀장 자체가 없으며, 팀원들이 수평적인 관계에서 모든 사항을 결정하고 본인의 의견이 적극적으로 반영될 수 있는 개발팀

- 팀 문화의 장점
  - 다양한 의견 제시 가능
  - 자기주도 학습 능력 향상
- 팀 문화의 단점
  - 확실한 의사결정권 부재

각 조직 문화에 대한 장단점은 있다고 생각합니다.
수직적인 관계의 팀장 문화는 더욱 체계적인 업무 프로세스와 신속한 의사결정이 장점이지만 팀장에 대한 깊은 의존성으로 자립성이 떨어지고, 조직원의 전문성이 낮아질 수 있습니다.
수평적인 팀 문화라면 자유로운 의사소통을 통해 창의적인 아이디어들이 많이 생산되고, 본인이 제시한 의견과 업무에 대해 책임감을 느낌으로서 전문성이 높아질 수 있는 큰 장점이 있습니다. 하지만 의사결정권자의 부재로 의사결정에 대해 다소 지연될 수 있고, 팀원 간의 깊은 유대감은 자기 집단만의 사고방식을 갖게 되는 함정에 빠지게 될 것입니다.
그렇지만 처절한 성과제도와 건강한 조직 문화를 구축한다면, 위와 같은 단점들을 보완할 수 있다고 생각합니다. 조직의 가치관이 뚜렷한 팀은 목표를 위해 모두 노력하며 서로의 발전을 위해 응원할 것입니다.

5. 이상적으로 생각하는 팀 프로젝트 방법에 대해 설명해주세요.
그동안 경험하거나 이상적으로 생각하는 개발 프로세스에 대해 설명해주세요.
기획자나 디자이너가 어느정도까지 가이드를 만들어야 할지, 개발팀이 어떤 프로세스로 일하는 게 좋을지 등 구체적으로 작성 해주시면 좋습니다.
- si프로젝트 진행의 단점
  - 서로의 업무를 모르는 기획자와 개발자의 협업의 문제
- 이상적인 개발 프로세스
  - 개발자의 기획 참여으로서 기술중심적인 서비스 개발 주도 가능

SI 프로젝트에서 받은 업무 프로세스에 대한 단점은 기획자와 개발자의 철저하게 분리되어 업무 분담이었습니다.
개발적인 지식이 없는 기획자의 기획은 
